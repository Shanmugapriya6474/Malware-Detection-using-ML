import pickle
import os
from sklearn.feature_extraction.text import CountVectorizer

def display_welcome_message():
    print(r"""
     __  __       _                          ____       _            _
    |  \/  | __ _| |_      ____ _ _ __ ___  |  _ \  ___| |_ ___  ___| |_ ___  _ __
    | |\/| |/ _` | \ \ /\ / / _` | '__/ _ \ | | | |/ _ \ __/ _ \/ __| __/ _ \| '__|
    | |  | | (_| | |\ V  V / (_| | | |  __/ | |_| |  __/ ||  __/ (__| || (_) | |
    |_|  |_|\__,_|_| \_/\_/ \__,_|_|  \___| |____/ \___|\__\___|\___|\__\___/|_|
    """)
    print("\nWelcome to antimalware detector\n")
    print("1. PE scanner")
    print("2. URL scanner")
    print("3. Exit")

def get_user_choice():
    while True:
        try:
            choice = int(input("\nEnter your choice : "))
            if choice in [1, 2, 3]:
                return choice
            else:
                print("Invalid choice. Please enter 1, 2, or 3.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def url_scanner():
    url = input("Input the URL that you want to check (e.g., google.com) : ")
    print(f"\nThe entered domain is: {url}")

    # Example URL scanning logic
    # In a real application, replace this with actual scanning logic
    # For example, using a pre-trained model to classify the URL
    # Here, we'll just simulate the output for demonstration
    from sklearn.feature_extraction.text import CountVectorizer
    import warnings
    warnings.warn("Please use `csr_matrix` from the `scipy.sparse` namespace, the `scipy.sparse.csr` namespace is deprecated.", DeprecationWarning)
    
    # Simulate vectorizer load and URL processing
    vectorizer = CountVectorizer()
    # Example prediction logic
    prediction = "good"  # Replace this with actual model prediction

    print(f"\nThe entered domain is: {prediction}")
    while True:
        again = input("Do you want to search again? (y/n) : ").strip().lower()
        if again in ['y', 'n']:
            if again == 'n':
                print("Exiting...")
                return
            elif again == 'y':
                url_scanner()
                return
        else:
            print("Invalid input. Please enter 'y' or 'n'.")

def main():
    display_welcome_message()
    choice = get_user_choice()
    if choice == 1:
        print("PE scanner selected.")
        # Implement PE scanner functionality here
    elif choice == 2:
        url_scanner()
    elif choice == 3:
        print("Exiting...")

if __name__ == "__main__":
    main()
